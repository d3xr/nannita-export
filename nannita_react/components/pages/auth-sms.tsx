import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { useLocation } from "wouter";
import { Phone, PhoneCall, MessageSquare, User, Shield, Timer, Smartphone, Volume2 } from "lucide-react";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import { useAuth } from "@/contexts/AuthContext";
import { useIsMobile } from "@/hooks/use-mobile";
import { useFeatureFlag } from "@/hooks/useFeatureFlag";
import { isV2EligibleRoute } from "@/utils/v2Routes";
import { normalizePhone, formatPhoneInput } from "@shared/phone-utils";
import { authClient } from "@/lib/auth-client";

const phoneSchema = z.object({
  phone: z.string().min(10, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
  role: z.enum(["parent", "nanny"]),
  agreements: z.boolean().refine(val => val === true, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"),
});

const codeSchema = z.object({
  code: z.string().regex(/^\d{4,6}$/, "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 4 –¥–æ 6 —Ü–∏—Ñ—Ä"),
});

const profileSchema = z.object({
  firstName: z.string().min(2, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è"),
  lastName: z.string().optional(),
  email: z.string().email("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email").optional().or(z.literal("")),
});

type PhoneFormData = z.infer<typeof phoneSchema>;
type CodeFormData = z.infer<typeof codeSchema>;
type ProfileFormData = z.infer<typeof profileSchema>;

type AuthMethod = 'otp' | 'voice' | 'sms' | 'flashcall';

export default function AuthSmsPage() {
  const [location, setLocation] = useLocation();
  const { setUser, isAuthenticated } = useAuth();
  
  // V2 Mobile Header Logic
  const isMobile = useIsMobile();
  const { isEnabled: isV2Enabled } = useFeatureFlag('MOBILE_V2');
  const shouldUseV2 = isMobile && isV2Enabled && isV2EligibleRoute(location);

  // SEO –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    import('../utils/seo').then(({ useSEO }) => {
      useSEO('auth');
    });
  }, []);
  const [step, setStep] = useState<'phone' | 'code' | 'profile'>('phone');
  const [phoneData, setPhoneData] = useState<PhoneFormData | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [timer, setTimer] = useState(0);
  const [authMethod, setAuthMethod] = useState<AuthMethod>('otp');
  const [lastCode, setLastCode] = useState<string>('');
  const [attemptCounts, setAttemptCounts] = useState({ otp: 0, voice: 0, sms: 0, flashcall: 0 });
  const [nextMethod, setNextMethod] = useState<AuthMethod>('otp');
  const [sessionId, setSessionId] = useState<string | null>(null);

  const phoneForm = useForm<PhoneFormData>({
    resolver: zodResolver(phoneSchema),
    defaultValues: {
      phone: "",
      role: "parent",
      agreements: false,
    },
  });

  // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL –¥–ª—è pre-fill —Ñ–æ—Ä–º—ã
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const phoneParam = urlParams.get('phone');
    const roleParam = urlParams.get('role') as 'parent' | 'nanny';
    
    if (phoneParam) {
      phoneForm.setValue('phone', phoneParam);
    }
    if (roleParam && (roleParam === 'parent' || roleParam === 'nanny')) {
      phoneForm.setValue('role', roleParam);
    }
  }, [phoneForm]);

  const codeForm = useForm<CodeFormData>({
    resolver: zodResolver(codeSchema),
    defaultValues: {
      code: "",
    },
  });

  const profileForm = useForm<ProfileFormData>({
    resolver: zodResolver(profileSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      email: "",
    },
  });

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  useEffect(() => {
    if (isAuthenticated) {
      // –†–µ–¥–∏—Ä–µ–∫—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω useRoleRedirect —Ö—É–∫–æ–º
      return;
    }
  }, [isAuthenticated, setLocation]);

  useEffect(() => {
    document.title = "–í—Ö–æ–¥ —á–µ—Ä–µ–∑ –∑–≤–æ–Ω–æ–∫/SMS ‚Äî Nannita";
    
    if (timer > 0) {
      const interval = setInterval(() => setTimer(t => t - 1), 1000);
      return () => clearInterval(interval);
    }
  }, [timer]);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
  const generateCode = () => {
    return Math.floor(1000 + Math.random() * 9000).toString();
  };

  const sendVerification = async (phone: string, role: string, method: string = 'sms') => {
    const response = await fetch('/api/auth/otp-send', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        phone,
        role,
        method
      })
    });
    return response;
  };

  const onPhoneSubmit = async (data: PhoneFormData) => {
    try {
      setIsLoading(true);
      setError(null);
      
      // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏ –Ω–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      setAttemptCounts({ otp: 0, voice: 0, sms: 0, flashcall: 0 });
      
      // –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - —Ç–µ–ø–µ—Ä—å SMS –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
      const response = await sendVerification(data.phone, data.role, 'sms');
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      }
      
      const result = await response.json();
      
      setAuthMethod('sms');
      setAttemptCounts({ otp: 0, voice: 0, sms: 1, flashcall: 0 }); // –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ SMS
      setLastCode(result.code || '');
      setPhoneData(data);
      setStep('code');
      setTimer(30); // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      
    } catch (error: any) {
      setError(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞');
    } finally {
      setIsLoading(false);
    }
  };

  const onCodeSubmit = async (data: CodeFormData) => {
    setIsLoading(true);
    setError(null);

    try {
      const normalizedPhone = normalizePhone(phoneData!.phone);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–¥ –Ω–∞–ø—Ä—è–º—É—é
      const response = await fetch('/api/auth/verify-code', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({
          phone: normalizedPhone,
          code: data.code, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
          role: phoneData!.role,
        }),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.message || '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥');
      }

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º JWT —Ç–æ–∫–µ–Ω—ã –¥–ª—è Enterprise authentication
      if (result.accessToken) {
        authClient.saveAccessTokenToStorage({
          accessToken: result.accessToken,
          expiresIn: result.expiresIn,
          tokenType: result.tokenType
        });
        console.log('üîê JWT tokens saved to localStorage after authentication');
      }

      if (result.isNewUser) {
        setStep('profile');
      } else {
        localStorage.setItem('currentUser', JSON.stringify(result.user));
        setUser(result.user);
        const returnUrl = new URLSearchParams(window.location.search).get('returnUrl');
        if (returnUrl) {
          setLocation(returnUrl);
        } else {
          const redirectUrl = result.user.activeRole === 'nanny' ? '/nanny-dashboard' : '/my-orders';
          setLocation(redirectUrl);
        }
      }
    } catch (error) {
      setError('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsLoading(false);
    }
  };

  const onProfileSubmit = async (data: ProfileFormData) => {
    setIsLoading(true);
    setError(null);

    try {
      const normalizedPhone = normalizePhone(phoneData!.phone);
      const response = await fetch('/api/auth/complete-registration', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({
          phone: normalizedPhone,
          role: phoneData!.role,
          ...data,
        }),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      }

      const result = await response.json();
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º JWT —Ç–æ–∫–µ–Ω—ã –¥–ª—è Enterprise authentication
      if (result.accessToken) {
        authClient.saveAccessTokenToStorage({
          accessToken: result.accessToken,
          expiresIn: result.expiresIn,
          tokenType: result.tokenType
        });
        console.log('üîê JWT tokens saved to localStorage after registration');
      }
      
      localStorage.setItem('currentUser', JSON.stringify(result.user));
      setUser(result.user);
      
      const returnUrl = new URLSearchParams(window.location.search).get('returnUrl');
      if (returnUrl) {
        setLocation(returnUrl);
      } else {
        if (phoneData!.role === 'nanny') {
          setLocation('/nanny-onboarding');
        } else {
          setLocation('/my-orders');
        }
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsLoading(false);
    }
  };

  const resendCode = async () => {
    if (timer > 0 || !phoneData) return;
    
    setIsLoading(true);
    setError(null);
    
    try {
      let newMethod: AuthMethod = authMethod;
      let newAttempts = { ...attemptCounts };
      
      // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï: –ü–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫ SMS –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ flashcall
      if (authMethod === 'sms' && attemptCounts.sms >= 3) {
        newMethod = 'flashcall';
        newAttempts.flashcall += 1;
        console.log('üîÑ Auto-switching to flashcall after 3 SMS attempts');
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
        setError('–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Flash Call –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫ SMS. –°–µ–π—á–∞—Å –≤–∞–º –ø–æ—Å—Ç—É–ø–∏—Ç –∑–≤–æ–Ω–æ–∫.');
      } else {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Ç–æ–¥–∞
        newAttempts[authMethod] += 1;
      }
      
      const response = await sendVerification(phoneData.phone, phoneData.role, newMethod);
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ');
      }
      
      const result = await response.json();
      
      setAuthMethod(newMethod);
      setAttemptCounts(newAttempts);
      setLastCode(result.code || '');
      setTimer(30); // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–µ—Ä
      
    } catch (error: any) {
      setError(error.message || '–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsLoading(false);
    }
  };



  // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  useEffect(() => {
    if (isAuthenticated) {
      setLocation('/dashboard');
    }
  }, [isAuthenticated, setLocation]);

  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  if (isAuthenticated) {
    return null; // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –∏–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {!shouldUseV2 && <Header />}
      
      <main className={`${shouldUseV2 ? 'pt-0' : 'pt-[73px]'} pb-16`}>
        <div className="container mx-auto px-4 max-w-md lg:max-w-lg">
          <Card className="mt-8">
            <CardHeader className="text-center">
              <div className="mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-nannita-orange">
                {step === 'phone' ? (
                  <Smartphone className="h-6 w-6 text-white" />
                ) : step === 'code' ? (
                  <MessageSquare className="h-6 w-6 text-white" />
                ) : (
                  <User className="h-6 w-6 text-white" />
                )}
              </div>
              <CardTitle className="text-xl lg:text-2xl font-heading text-gray-900">
                {step === 'phone' && '–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'}
                {step === 'code' && (
                  authMethod === 'sms' ? 'SMS –∫–æ–¥' : 
                  authMethod === 'flashcall' ? 'Flash call' : 
                  '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏'
                )}
                {step === 'profile' && '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'}
              </CardTitle>
              <div className="text-sm text-gray-600 space-y-1">
                {step === 'phone' && (
                  <p>–ü–æ–ª—É—á–∏—Ç–µ SMS –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–µ—Ä–≤–∏—Å</p>
                )}
                {step === 'code' && (
                  <p className="text-gray-700">
                    {authMethod === 'sms' ? 'SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞' : 
                     authMethod === 'flashcall' ? 'Flash call –Ω–∞ –Ω–æ–º–µ—Ä' : 
                     '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞'} {phoneData?.phone}
                    {authMethod === 'flashcall' && (
                      <span className="block text-sm text-gray-500 mt-1">
                        –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –∑–≤–æ–Ω—è—â–µ–≥–æ
                      </span>
                    )}
                  </p>
                )}
                {step === 'profile' && (
                  <p>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ</p>
                )}
              </div>
            </CardHeader>

            <CardContent className="space-y-6">
              {error && (
                <div className="rounded-lg bg-red-50 p-3 text-sm text-red-600">
                  {error}
                </div>
              )}

              {step === 'phone' && (
                <Form {...phoneForm}>
                  <form onSubmit={phoneForm.handleSubmit(onPhoneSubmit)} className="space-y-4">
                    <FormField
                      control={phoneForm.control}
                      name="role"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>–Ø ‚Äî</FormLabel>
                          <Select onValueChange={field.onChange} defaultValue={field.value}>
                            <FormControl>
                              <SelectTrigger data-testid="select-role">
                                <SelectValue />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="parent">–ö–ª–∏–µ–Ω—Ç (–∏—â—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞)</SelectItem>
                              <SelectItem value="nanny">–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç (—Ö–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å)</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={phoneForm.control}
                      name="phone"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</FormLabel>
                          <FormControl>
                            <Input
                              placeholder="+7 (999) 123-45-67"
                              {...field}
                              type="tel"
                              onChange={(e) => {
                                const formatted = formatPhoneInput(e.target.value);
                                field.onChange(formatted);
                              }}
                              data-testid="input-phone"
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    {/* –°–æ–≥–ª–∞—à–µ–Ω–∏—è */}
                    <FormField
                      control={phoneForm.control}
                      name="agreements"
                      render={({ field }) => (
                        <FormItem className="border-t pt-4">
                          <div className="flex items-start space-x-2">
                            <FormControl>
                              <Checkbox
                                checked={field.value}
                                onCheckedChange={field.onChange}
                                id="agreements"
                                className="mt-0.5"
                              />
                            </FormControl>
                            <Label htmlFor="agreements" className="text-sm leading-relaxed">
                              –Ø –ø—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è{' '}
                              <a href="/agreement" target="_blank" className="text-orange-500 hover:underline">
                                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
                              </a>
                              {' '}–∏ –¥–∞—é{' '}
                              <a href="/personal-data-consent" target="_blank" className="text-orange-500 hover:underline">
                                —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                              </a>
                            </Label>
                          </div>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <Button
                      type="submit"
                      disabled={isLoading}
                      className="w-full bg-nannita-orange hover:bg-nannita-orange-dark"
                      data-testid="button-submit"
                    >
                      {isLoading ? "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS..." : "–ü–æ–ª—É—á–∏—Ç—å SMS –∫–æ–¥"}
                    </Button>
                  </form>
                </Form>
              )}

              {step === 'code' && (
                <Form {...codeForm}>
                  <form onSubmit={codeForm.handleSubmit(onCodeSubmit)} className="space-y-6">
                    <FormField
                      control={codeForm.control}
                      name="code"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-base font-medium text-gray-900">
                            {authMethod === 'flashcall' ? '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∑–≤–æ–Ω—è—â–µ–≥–æ' : '–ö–æ–¥ –∏–∑ SMS'}
                          </FormLabel>
                          <FormControl>
                            <Input 
                              placeholder="0000"
                              {...field}
                              maxLength={4}
                              className="text-center text-2xl tracking-[0.5em] font-bold h-14 bg-gray-50 border border-gray-200 focus:border-nannita-orange focus:bg-white transition-colors"
                              data-testid="input-code"
                              autoComplete="one-time-code"
                              inputMode="numeric"
                              pattern="[0-9]*"
                            />
                          </FormControl>

                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <Button 
                      type="submit" 
                      disabled={isLoading} 
                      className="w-full bg-nannita-orange hover:bg-nannita-orange-dark"
                      data-testid="button-verify"
                    >
                      {isLoading ? "–ü—Ä–æ–≤–µ—Ä—è–µ–º..." : "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"}
                    </Button>

                    <div className="text-center">
                      {timer > 0 ? (
                        <p className="text-sm text-gray-600 flex items-center justify-center gap-1">
                          <Timer className="h-4 w-4" />
                          –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ {timer} —Å–µ–∫
                        </p>
                      ) : (
                        <div className="space-y-2">
                          <Button 
                            type="button" 
                            variant="ghost" 
                            onClick={resendCode}
                            disabled={isLoading}
                            className="text-sm"
                            data-testid="button-resend"
                          >
                            {authMethod === 'flashcall' ? '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–≤–æ–Ω–æ–∫' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS –ø–æ–≤—Ç–æ—Ä–Ω–æ'}
                          </Button>
                          

                        </div>
                      )}
                      

                    </div>
                  </form>
                </Form>
              )}

              {step === 'profile' && (
                <Form {...profileForm}>
                  <form onSubmit={profileForm.handleSubmit(onProfileSubmit)} className="space-y-4">
                    <FormField
                      control={profileForm.control}
                      name="firstName"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>–ò–º—è</FormLabel>
                          <FormControl>
                            <Input {...field} placeholder="–í–∞—à–µ –∏–º—è" data-testid="input-firstname" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={profileForm.control}
                      name="lastName"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>–§–∞–º–∏–ª–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</FormLabel>
                          <FormControl>
                            <Input {...field} placeholder="–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è" data-testid="input-lastname" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={profileForm.control}
                      name="email"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</FormLabel>
                          <FormControl>
                            <Input {...field} placeholder="your@email.com" type="email" data-testid="input-email" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <Button 
                      type="submit" 
                      disabled={isLoading} 
                      className="w-full bg-nannita-orange hover:bg-nannita-orange-dark"
                      data-testid="button-complete"
                    >
                      {isLoading ? "–ó–∞–≤–µ—Ä—à–∞–µ–º..." : "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"}
                    </Button>
                  </form>
                </Form>
              )}
            </CardContent>
          </Card>
        </div>
      </main>
      {!shouldUseV2 && <Footer />}
    </div>
  );
}